@page "/"
@using DependencyInjectionDemo.Logic
@* @inject DemoLogic logic *@
@inject IDemoLogic logic
@inject ILogger<Index> logger

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<h3>
    Value1: @logic.Value1
</h3>
<h3>
    Value2: @logic.Value2
</h3>

@code {
    //private DemoLogic logic;

    // when initialize this page it get the value of logic
    // these random numbers we get then new everytime when we go in the page
    protected override void OnInitialized()
    {
        // this is just instantiating
        // but not the best way to do it
        // because we need to do it in 10 different locations and it depends on DemoLogic everytime
        // and now if we need to change in one place this DemoLogic it is pain in the neck, because we need to check the code
        // thats how dependencies create tight dependency coupling
        // because now it is coupled to DemoLogic.cs
        // it is made a little less with dependency injection

        // normally we ask it is constrctor
        // both not needed because we have injected
        //logic = new();

        // it is structured logging and values are stored separately so searching is easier when you need to search for info
        // so do not use string interpolation when using logging, do like below
        // string interpolation force everthing to be static string
        logger.LogInformation("Displaying values of {Value1} and {Value2}", logic.Value1, logic.Value2);
    }
}
